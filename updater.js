module.exports = function(o) {
  var updater;
  updater = "// ## USO Updater, a Userscripts updater. This file contains all the Javasript logic for the updater.\n// Feel free to scroll down for the annotated source code.  \n//\n// Designed to be simple to use and implement, while also complex and\n// versitile if needed. There are two interfaces that you will need to\n// know about:\n//\n// * The GET parameter API, where HTTP GET parameters modify this output\n//   file\n// * The Javascript API, which can be observed below.\n//\n// Most people put the updater URL in a `@require` metadata field within a Userscript, but really, you should\n// just do whatever you want with it. Yay for freedom. But if you are 'most people', take a look at this sucker:\n//\n//     @require http://updater.usotools.co.cc/12345.js\n//\n// A quick GET parameter rundown: (The valid parameters are in bold)\n// <code>http://updater.usotools.co.cc/**12345**.js?**api**=1&**lang**=en&**interval**=7&**update**=update</code>\n//\n// #### Required GET parameters:\n// * **12345**: Replace this with your script ID number, good times.\n\n// #### Optional GET parameters\n// * **api**: Want the Javascript API? `1` for yes, `0` for no. Simple.\n// * **lang**: Set this only if you want everybody to see the same language. Uses a two character language code.\n//             If you like people seeing the updater in their home language, don't set it. `:D`\n// * **interval**: Maximum number of days between updates. Minimum of 1\n// * **update**:\n//     * update: Direct install without bumping install count. How integral of you!\n//     * install: Straight to the goods. Doesn't show the homepage unless your script is\n//       naughty and un-listed. tut tut.\n//     * show: The default one. Shows the homepage on update.\n//\n// ### Credits\n// Thanks to the following for ideas / concepts / being cool:\n//\n// * [Photodeus](http://userscripts.org/users/photodeus) - The guy who posted the idea here: http://userscripts.org/topics/29195\n// * [Jesse Andrews](http://userscripts.org/users/anotherjesse) - For being a awesome USO host, and giving tips along the way\n// * [Marti Martz](http://userscripts.org/users/marti) - For arguing ideas to hell and back, then coming to general consensus\n// * [Sizzlemctwizzle](http://userscripts.org/users/sizzle) - A man full of good ideas\n// * Anyone else I missed, which is probably a lot. Edit your name in here and send me a pull / patch request :p\n//\n// **Anyways, onto the Javascript code we go!**\n\n";
  if (o.api === true) {
    updater += "// Create our API reference\nif ( typeof USO !== 'object' )\n  USO = {};\n";
  }
  updater += "// Anonymous function wrapper to avoid collisions in the sandbox global context\n(function( apiReference ) {\n\n//## USOScript prototype\n// USOScript: contructor Function\n// A prototype to access various methods for\n// handling USO User Scripts\nvar USOScript = function(script_id) {\n  this.id = typeof script_id === 'number' ? script_id : this.id;\n};\n\n// Extend the USOScript prototype\nUSOScript.prototype = {\n  constructor: USOScript,\n\n  //### USOScript::id\n  // Public access to the USO script id, which is unique for every script.\n  id: parseInt( '" + o.script.id + "', 10 ),\n\n  // Private remoteMeta\n  _remoteMeta: (" + o.script.meta + "),\n\n  //### USOScript::remoteMeta\n  // The snapshot (unless recently updated with USOScript::updateRemoteMeta)\n  // of the `.meta.js` file in a Javascript object form\n  get remoteMeta() { return this._remoteMeta; },\n\n  // Private localMeta\n  _localMeta: null,\n\n  //### USOScript::localMeta (The setter)\n  // Set it to a metadata string, then out pops a Javascript object representation\n  set localMeta( rawE4X ) { this._localMeta = this.parseMeta( rawE4X.toString() ); },\n\n  //### USOScript:localMeta (The getter)\n  // When you have set the localMeta with:\n  //\n  //     script.localMeta = metadataString;\n  //\n  // This will contain the object respresentation\n  get localMeta() { return this._localMeta; },\n\n  //### USOScript::combinedMeta\n  // Hey remoteMeta, meet localMeta! Get merged into one object!\n  //\n  // localMeta takes priority over remoteMeta\n  // At present it will will overwrite Object keys completely if\n  // one is present in localMeta.\n  get combinedMeta() {\n    if ( this.localMeta === null )\n      return this.remoteMeta;\n\n    var ret = {},\n      key, key2;\n\n    // We don't want to overwrite remoteMeta\n    for ( key in this.remoteMeta )\n      ret[ key ] = this.remoteMeta[ key ];\n\n    // Do the merge\n    for ( key in this.localMeta ) {\n      if ( typeof this.localMeta[ key ] === typeof ret[ key ] ) {\n        if ( typeof ret[ key ] === 'object' &&\n            ret[ key ] instanceof Array === false ) {\n          for ( key2 in this.localMeta[ key ] )\n            ret[ key ][ key2 ] = this.localMeta[ key ][ key2 ];\n        } else\n          ret[ key ] = this.localMeta[ key ];\n      } else\n        ret[ key ] = this.localMeta[ key ];\n    }\n\n    return ret;\n  },\n\n  //### USOScript::parseMeta\n  // Parses meta string into a Javascript object. Use at will!\n  //\n  // @param metaString  [String]\n  //      The metadata string to parse\n  parseMeta: function ( metaString ) {\n    var ret = {};\n\n    metaString.replace( /@(\\S+?)(?::(\\S+))?(?:[ \\t]+([^\\r\\n]+)|\\s+)/g, function( line, key, key2, value ) {\n      if (key2 && key2.length > 0) {\n        if (typeof ret[key] !== 'object')\n          ret[key] = {};\n        ret[key][key2] = value;\n      }\n      else if (typeof ret[key] === 'string')\n        ret[key] = [ret[key], value];\n      else if (ret[key] instanceof Array)\n        ret[key].push(value);\n      else\n        ret[key] = value;\n    } );\n    return ret;\n  },\n\n  //### USOScript::updateRemoteMeta\n  //\n  // Updates the remoteMeta from the USO copy of the script `.meta.js`\n  updateRemoteMeta: function( callback ) {\n    var fn = this;\n    GM_xmlhttpRequest({\n      url: 'http://userscripts.org/scripts/source/' + this.id + '.meta.js',\n      method: 'GET',\n      onload: function( xhr ) {\n        fn._remoteMeta = fn.parseMeta( xhr.responseText );\n        if ( typeof callback === 'function' )\n          callback.call( fn, fn.remoteMeta );\n        fn = null;\n      }\n    });\n  }\n};\n//## USOUpdater prototype\n// USOUpdater: constructor Function\n// A prototype that updates a USOScript instance\nvar USOUpdater = function() {\n  this.construct.apply( this, arguments );\n  this.construct = null;\n  return this;\n};\n\n// Extend the USOUpdater prototype\nUSOUpdater.prototype = (function() {\n  //## Private variables / methods\n\n  // The max amount in hours\n  var maxInterval = parseInt( '" + o.interval + "', 10 ),\n\n  // The current increment\n  increment = parseInt( GM_getValue('uso_updater/last_increment', 0 ), 10 ),\n\n  // calculateInterval: Function\n  // Calulates a time interval based on a increment\n  //\n  // @param increment [Number]\n  calculateInterval = function( increment, max ) {\n    var hours = Math.round( Math.exp( increment ) * ( 1 / ( Math.exp(4) / 24 ) ) );\n\n    if ( 150 < hours )\n      hours = Math.round( hours / 168 ) * 168;\n    else if ( 20 < hours )\n      hours = Math.round( hours / 24 ) * 24;\n    if ( hours >= max )\n      return max;\n\n    return hours;\n  },\n\n  // checkUpdateNeeded: Function\n  // Check interval against last update time\n  checkUpdateNeeded = function() {\n    var interval = calculateInterval( increment, maxInterval ) * 60 * 60;\n    if ( GM_getValue( 'uso_updater/enabled', true ) === true &&\n        ( new Date().getTime() / 1000 - parseInt( GM_getValue( 'uso_updater/last_update', 1 ), 10 ) >= interval ) ) //'\n      this.update( false );\n  };\n\n  //## Public variables / methods\n  return {\n  constructor: USOUpdater,\n  construct: function( usoScript ) {\n    this.script = usoScript;\n\n    // Make sure we are in the correct environment\n    try {\n      if ( typeof GM_xmlhttpRequest === 'function' &&\n          top.location.href === location.href )\n        checkUpdateNeeded.call( this );\n    } catch ( error ) {\n      if ( typeof GM_xmlhttpRequest === 'function' )\n        checkUpdateNeeded.call( this );\n    }\n  },\n\n  //### USOUpdater::script\n  // Contains a USOScript prototype. API docs above ---^\n  script: null,\n\n  //### USOUpdater::enabled (getter / setter)\n  // When assigned to: Enables and disables the updater. Accepts boolean. This would disable the updater:\n  //\n  //     updater.enabled = false;\n  //\n  // When treated as value: Return true when enabled, false otherwise\n  get enabled() { return GM_getValue( 'uso_updater/enabled', false ); },\n  set enabled( boolean ) { GM_setValue( 'uso_updater/enabled', boolean === true ? true : false );},\n\n  //### USOUpdater::localMeta (setter)\n  // Interface for setting script localMeta. Yay for shortcuts!\n  set localMeta( rawE4X ) { this.script.localMeta = rawE4X; },\n\n  //### USOUpdater::locale\n  // Contains the localized strings from Google translate.\n  // Object hash with name-value pairs. Modify to your like to set custom\n  // strings from the Javascript!\n  locale: (" + o.locale_string + "),\n\n  //### USOUpdater::updateUrl\n  // Contains the update URL to direct to.\n  // Can be changed if you want to point to your own website or something.\n  updateUrl: '" + o.update_url + "',\n\n  //### USOUpdater::update\n  // \\*drumroll\\*\n  // The main update function for the updater, call it with `true` as the\n  // first argument to force an update check\n  update: function( forced ) {\n    var fn = this,\n      previousMeta = this.script.remoteMeta;\n\n    // Fetch meta from USO and check for updates\n    this.script.updateRemoteMeta( function( meta ) {\n      if ( typeof meta['uso']['version'] === 'string' &&\n          typeof meta['name'] === 'string' &&\n          typeof meta['namespace'] === 'string' ) {\n        var details = fn.script;\n        details.newVersion = parseInt( meta['uso']['version'], 10 );\n        details.currentVersion = parseInt( previousMeta['uso']['version'], 10 );\n\n        // Check to see if we have newer version we haven't seen\n        if ( details.newVersion > details.currentVersion &&\n            details.currentVersion >= parseInt( GM_getValue( 'uso_updater/new_version', 0 ), 10 ) ) {\n          GM_setValue( 'uso_updater/last_increment', 1 );\n          GM_setValue( 'uso_updater/new_version', details.newVersion );\n        } else if ( forced !== true )\n          GM_setValue( 'uso_updater/last_increment', 1 + increment );\n\n        // See if the name or namespace has changed\n        if ( previousMeta['name'] !== meta['name'] ||\n            previousMeta['namespace'] !== meta['namespace'] )\n          GM_setValue( 'uso_updater/enabled', false );\n\n        // Trigger the callback\n        fn.onUpdate.call( fn, details, fn.locale, forced === true ? true : false );\n      } else\n        GM_setValue( 'uso_updater/enabled', false );\n\n      GM_setValue( 'uso_updater/last_update', Math.floor( ( new Date().getTime() ) / 1000 ) );\n      fn = null;\n    } );\n  },\n\n  //### USOUpdater::menuUpdate\n  // Set to true to enable force updating from the Greasemonkey menu\n  //\n  //     updater.menuUpdate = true\n  set menuUpdate( boolean ) {\n    if ( boolean === true ) {\n      var fn = this;\n      GM_registerMenuCommand( this.script.combinedMeta['name'] + ': ' +\n        this.locale['menuCheckUpdates'], function() { fn.update.call( fn, true ); } );\n    }\n  },\n\n  //### USOUpdater::menuToggle\n  // Set to true to enable turning off updater from menu\n  //\n  //     updater.menuToggle = true\n  set menuToggle( boolean ) {\n    if ( boolean === true ) {\n      var fn = this;\n      GM_registerMenuCommand( this.script.combinedMeta['name'] + ': ' +\n          this.locale['menuToggle'], function() {\n        if ( GM_getValue( 'uso_updater/enabled', true ) === true ) {\n          alert( fn.script.combinedMeta['name'] + ': ' + fn.locale['updaterOff'] );\n          GM_setValue( 'uso_updater/enabled', false );\n        } else {\n          alert( fn.script.combinedMeta['name'] + ': ' + fn.locale['updaterOn'] );\n          GM_setValue( 'uso_updater/enabled', true );\n        }\n      } );\n    }\n  },\n\n  //### USOUpdater::onUpdate\n  // The main update callback\n  // You can over-ride this function to create your own custom update\n  // callbacks. Enables developers to make themes and stuff! :p\n  //\n  // @param details [USOScript Object]\n  // @param locale  [Object]\n  //      Contains localized strings\n  onUpdate: function( details, locale, forced ) {\n    var meta = details.combinedMeta;\n    if (details.newVersion > details.currentVersion) {\n      if ( confirm( meta['name'] + ': ' + locale['updateAvailable'] ) )\n        GM_openInTab( this.updateUrl );\n    } else if ( forced )\n      alert( meta['name'] + ': ' + locale['updateUnavailable'] );\n  }\n};})();\n\n// End of anonymous function wrapper. Pass in variable to attach ourselves to.\n";
  if (o.api === true) {
    updater += "apiReference.script = USOScript;\napiReference.updater = new USOUpdater( new USOScript() );\n})( USO );\n";
  } else {
    updater += "new USOUpdater( new USOScript() );\n})();";
  }
  return updater;
};